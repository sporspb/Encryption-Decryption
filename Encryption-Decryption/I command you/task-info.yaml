type: edu
custom_name: stage4
files:
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            String command = scanner.nextLine();
            String s = scanner.nextLine();
            char[] text = s.toCharArray();
            int key = scanner.nextInt();
            int startPos = 32;
            int endPos = 126;

            if (command.equals("enc")) {
                System.out.println(doEncrypt(text, key, startPos, endPos));
            } else if (command.equals("dec")) {
                System.out.println(doDecrypt(text, key, startPos, endPos));
            } else {
                System.out.println("wrong command");
            }
        }

        static String doEncrypt(char[] message, int key, int startPos, int endPos) {
            for (int i = 0; i < message.length; i++) {
                char letter = message[i];
                if (letter >= startPos && letter <= endPos) {
                    int pos = (letter + key - startPos) % (endPos - startPos + 1);
                    message[i] = (char) (startPos + pos);
                }
            }
            return new String(message);
        }

        static String doDecrypt(char[] message, int key, int startPos, int endPos) {
            for (int i = 0; i < message.length; i++) {
                char letter = message[i];
                if (letter - key < startPos) {
                    int pos = endPos - (letter - startPos - key);
                    message[i] = (char) (startPos + pos);
                } else {
                    int pos = (letter - key);
                    message[i] = (char) pos;
                }
            }
            return new String(message);
        }
    }
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-data", "Welcome to hyperskill!"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-data", "Hello"
                    )
                    .setAttach("Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-data", "012345678",
                        "-mode", "enc"
                    )
                    .setAttach("123456789"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-data", "\\jqhtrj%yt%m~ujwxpnqq&",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "0",
                        "-data", "Hi"
                    )
                    .setAttach("Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-data", "222233334444"
                    )
                    .setAttach("111122223333")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            return new CheckResult(reply.trim().equals(clue.trim()));
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/46/stages/248/implement
status: Solved
record: 3
